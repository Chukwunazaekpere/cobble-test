{"ast":null,"code":"var _jsxFileName = \"/home/chukwunazaekpere/Documents/Fullstack/javascript/NodeJS/cobble/frontend/src/components/Confirm.tsx\",\n    _s = $RefreshSig$();\n\nimport axios from 'axios';\nimport React, { useEffect, useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { showProcessingGifAction, toggleConfirmAction, toggleModalAction } from '../redux/actions/appActions';\nimport \"../styles/ModalStyles.css\";\nimport { pascalCaseSeparator } from '../validators';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Confirm = props => {\n  _s();\n\n  console.log(\"\\n\\t Confirm...\");\n  const dispatch = useDispatch();\n  const [formDataPreview, setFormDataPreview] = useState({\n    \"accomodationStatus\": '',\n    \"rentAmount\": 0,\n    \"monthlyIncome\": 0,\n    \"paymentPlan\": \"\"\n  });\n\n  const toggleModal = action => {\n    if (action.toLowerCase() === 'edit') {\n      dispatch(toggleConfirmAction(false));\n      return dispatch(toggleModalAction(true));\n    }\n\n    sendRequest();\n    dispatch(showProcessingGifAction({\n      showGif: true,\n      gifStatus: \"loading\",\n      gifMessage: \"Please wait. Cobble is processing your request...\"\n    }));\n  };\n\n  useEffect(() => {\n    setFormDataPreview({\n      \"accomodationStatus\": props.formData[\"Accomodation Status\"],\n      \"monthlyIncome\": props.formData[\"Monthly Income\"],\n      \"paymentPlan\": props.formData[\"Payment Plan\"],\n      \"rentAmount\": props.formData[\"Rent Amount\"]\n    });\n  }, [props.formData]);\n  const actionBtns = [\"Accept\", \"Edit\"];\n\n  const sendRequest = async () => {\n    try {\n      const response = await axios.post(`${process.env.REACT_APP_LOCAL_SERVER}/rent/rent-request`, { ...formDataPreview\n      }, {\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      });\n      const message = response.data.message;\n      dispatch(toggleConfirmAction(false));\n      dispatch(toggleModalAction(false));\n      setTimeout(() => {\n        dispatch(showProcessingGifAction({\n          showGif: true,\n          gifStatus: \"success\",\n          gifMessage: message\n        }));\n      }, 4000);\n      setTimeout(() => {\n        dispatch(showProcessingGifAction({\n          showGif: false,\n          gifStatus: \"loading\",\n          gifMessage: \"\"\n        }));\n        window.location.reload();\n      }, 10000);\n    } catch (error) {\n      console.log(\"\\n\\t Error: \", error.response);\n      const message = error.response ? error.response.data.message : \"Network error\";\n      setTimeout(() => {\n        dispatch(showProcessingGifAction({\n          showGif: true,\n          gifStatus: \"error\",\n          gifMessage: message\n        }));\n      }, 4000);\n      setTimeout(() => {\n        dispatch(showProcessingGifAction({\n          showGif: false,\n          gifStatus: \"loading\",\n          gifMessage: \"\"\n        }));\n      }, 10000);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"modal d-flex justify-content-center align-items-center ml-5 animate__animated animate__bounce\",\n    role: \"dialog\",\n    id: \"modal\",\n    tabIndex: -1,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"modal-dialog\",\n      role: \"\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"modal-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"section\", {\n          className: \"modal-header\",\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \" text-teal-500 text-2xl font-serif\",\n            children: \"Please confirm the inputted details\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n          className: \"modal-body\",\n          children: formDataPreview && Object.keys(formDataPreview).map(data => /*#__PURE__*/_jsxDEV(\"article\", {\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"font-serif\",\n              children: [pascalCaseSeparator(data), \":\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 104,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n              className: \"font-serif\",\n              htmlFor: \"\",\n              children: parseInt(formDataPreview[data]) ? (+formDataPreview[data]).toLocaleString() : formDataPreview[data]\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 105,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 106,\n              columnNumber: 37\n            }, this)]\n          }, data, true, {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 33\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n          className: \"modal-footer\",\n          children: actionBtns.map(btns => /*#__PURE__*/_jsxDEV(\"button\", {\n            \"data-target\": \"#modal\",\n            \"data-toggle\": \"modal\",\n            onClick: () => toggleModal(btns),\n            \"data-dismiss\": `${btns.toLowerCase() === 'cancel' ? 'modal' : undefined}`,\n            className: `font-serif btn ${btns.toLowerCase() === 'accept' ? 'bg-blue-900' : 'btn-secondary'} text-white`,\n            children: btns\n          }, btns, false, {\n            fileName: _jsxFileName,\n            lineNumber: 114,\n            columnNumber: 33\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 94,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Confirm, \"HLNj/GnwQ8WUovT1e29GER4P2zc=\", false, function () {\n  return [useDispatch];\n});\n\n_c = Confirm;\nexport default Confirm;\n\nvar _c;\n\n$RefreshReg$(_c, \"Confirm\");","map":{"version":3,"sources":["/home/chukwunazaekpere/Documents/Fullstack/javascript/NodeJS/cobble/frontend/src/components/Confirm.tsx"],"names":["axios","React","useEffect","useState","useDispatch","showProcessingGifAction","toggleConfirmAction","toggleModalAction","pascalCaseSeparator","Confirm","props","console","log","dispatch","formDataPreview","setFormDataPreview","toggleModal","action","toLowerCase","sendRequest","showGif","gifStatus","gifMessage","formData","actionBtns","response","post","process","env","REACT_APP_LOCAL_SERVER","headers","message","data","setTimeout","window","location","reload","error","Object","keys","map","parseInt","toLocaleString","btns","undefined"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport React, { useEffect, useState } from 'react'\nimport { useDispatch, useSelector } from 'react-redux';\nimport { showProcessingGifAction, toggleConfirmAction, toggleModalAction } from '../redux/actions/appActions';\nimport \"../styles/ModalStyles.css\"\nimport { pascalCaseSeparator } from '../validators';\nimport { FormDataInterface } from './Modal';\nimport ProcessingGif from './ProcessingGif';\n\n\ninterface Props {\n    formData: any\n}\n\nconst Confirm = (props: Props) => {\n    console.log(\"\\n\\t Confirm...\")\n    const dispatch = useDispatch();\n    const [formDataPreview, setFormDataPreview] = useState({\n        \"accomodationStatus\": '', \n        \"rentAmount\": 0, \n        \"monthlyIncome\": 0, \n        \"paymentPlan\": \"\"\n    })\n\n    const toggleModal = (action: string) => {\n        if(action.toLowerCase() === 'edit'){\n            dispatch(toggleConfirmAction(false))\n            return dispatch(toggleModalAction(true));\n        }\n        sendRequest();\n        dispatch(showProcessingGifAction({\n            showGif: true,\n            gifStatus: \"loading\",\n            gifMessage: \"Please wait. Cobble is processing your request...\"\n        }));\n    }\n  \n    useEffect(() => {\n        setFormDataPreview({\n            \"accomodationStatus\": props.formData[\"Accomodation Status\"],\n            \"monthlyIncome\": props.formData[\"Monthly Income\"],\n            \"paymentPlan\": props.formData[\"Payment Plan\"],\n            \"rentAmount\": props.formData[\"Rent Amount\"]\n        })\n    }, [props.formData])\n    const actionBtns = [\"Accept\", \"Edit\"];\n\n    const sendRequest = async() => {\n        try {\n            const response = await axios.post(`${process.env.REACT_APP_LOCAL_SERVER}/rent/rent-request`, {...formDataPreview}, {\n                headers: {\n                    \"Content-Type\": \"application/json\"\n                }\n            });\n            const message = response.data.message;\n            dispatch(toggleConfirmAction(false));\n            dispatch(toggleModalAction(false));\n            setTimeout(() => {\n                dispatch(showProcessingGifAction({\n                    showGif: true,\n                    gifStatus: \"success\",\n                    gifMessage: message\n                }));\n            }, 4000)\n\n            setTimeout(() => {\n                dispatch(showProcessingGifAction({\n                    showGif: false,\n                    gifStatus: \"loading\",\n                    gifMessage: \"\"\n                }));\n                window.location.reload()\n            }, 10000)\n        } catch (error: any) {\n            console.log(\"\\n\\t Error: \", error.response)\n            const message = error.response ? error.response.data.message : \"Network error\";\n            setTimeout(() => {\n                dispatch(showProcessingGifAction({\n                    showGif: true,\n                    gifStatus: \"error\",\n                    gifMessage: message\n                }));\n            }, 4000)\n            setTimeout(() => {\n                dispatch(showProcessingGifAction({\n                    showGif: false,\n                    gifStatus: \"loading\",\n                    gifMessage: \"\"\n                }));\n            }, 10000)\n        }\n    }\n    return (\n        <div className=\"modal d-flex justify-content-center align-items-center ml-5 animate__animated animate__bounce\"  role=\"dialog\" id=\"modal\" tabIndex={-1}>\n            <div className=\"modal-dialog\" role=\"\">\n                <div className=\"modal-content\">\n                    <section className=\"modal-header\">\n                        <p className=\" text-teal-500 text-2xl font-serif\">Please confirm the inputted details</p>\n                    </section>\n                    <section className=\"modal-body\">\n                        {\n                            formDataPreview && Object.keys(formDataPreview).map(data => (\n                                <article key={data}>\n                                    <p className=\"font-serif\">{pascalCaseSeparator(data)}:</p>\n                                    <label className=\"font-serif\" htmlFor=\"\">{parseInt((formDataPreview as any)[data] as any) ? (+(formDataPreview as any)[data]).toLocaleString() : (formDataPreview as any)[data]}</label>\n                                    <hr />\n                                </article>\n                            ))\n                        }\n                    </section>\n                    <section className=\"modal-footer\">\n                        {\n                            actionBtns.map(btns => (\n                                <button \n                                    key={btns} \n                                    data-target=\"#modal\"\n                                    data-toggle=\"modal\"\n                                    onClick={() => toggleModal(btns)}\n                                    data-dismiss={`${btns.toLowerCase() === 'cancel' ? 'modal' : undefined }`}\n                                    className={`font-serif btn ${btns.toLowerCase() === 'accept' ? 'bg-blue-900' : 'btn-secondary'} text-white`}>\n                                    {btns}\n                                </button>\n                            ))\n                        }\n                    </section>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default Confirm;\n\n\n"]},"metadata":{},"sourceType":"module"}