{"ast":null,"code":"var _jsxFileName = \"/home/chukwunazaekpere/Documents/Fullstack/javascript/NodeJS/cobble/frontend/src/components/Confirm.tsx\",\n    _s = $RefreshSig$();\n\nimport axios from 'axios';\nimport React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { showProcessingGifAction, toggleConfirmAction, toggleModalAction } from '../redux/actions/appActions';\nimport \"../styles/ModalStyles.css\";\nimport { pascalCaseSeparator } from '../validators';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Confirm = props => {\n  _s();\n\n  console.log(\"\\n\\t Confirm...\");\n  const dispatch = useDispatch();\n  const gifData = useSelector(store => store.gifData);\n  const {\n    showGif\n  } = gifData;\n  const [formDataPreview, setFormDataPreview] = useState({\n    \"accomodationStatus\": '',\n    \"rentAmount\": 0,\n    \"monthlyIncome\": 0,\n    \"paymentPlan\": \"\"\n  });\n\n  const toggleModal = action => {\n    if (action.toLowerCase() === 'edit') {\n      dispatch(toggleConfirmAction(false));\n      return dispatch(toggleModalAction(true));\n    }\n\n    sendRequest();\n    dispatch(showProcessingGifAction({\n      showGif: true,\n      gifStatus: \"loading\",\n      gifMessage: \"Please wait. Cobble is processing your request...\"\n    }));\n  };\n\n  useEffect(() => {\n    setFormDataPreview({\n      \"accomodationStatus\": props.formData[\"Accomodation Status\"],\n      \"monthlyIncome\": props.formData[\"Monthly Income\"],\n      \"paymentPlan\": props.formData[\"Payment Plan\"],\n      \"rentAmount\": props.formData[\"Rent Amount\"]\n    });\n  }, [props.formData]);\n  const actionBtns = [\"Accept\", \"Edit\"];\n\n  const sendRequest = async () => {\n    try {\n      const response = await axios.post(`${process.env.REACT_APP_LOCAL_SERVER}/rent/rent-request`, { ...formDataPreview\n      }, {\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      });\n      const message = response.data.message;\n      setTimeout(() => {\n        dispatch(toggleConfirmAction(false));\n        dispatch(toggleModalAction(false));\n        dispatch(showProcessingGifAction({\n          showGif: false,\n          gifStatus: \"success\",\n          gifMessage: message\n        }));\n      }, 5000);\n    } catch (error) {\n      console.log(\"\\n\\t Error: \", error);\n      const message = error.response.data.message;\n      setTimeout(() => {\n        dispatch(showProcessingGifAction({\n          showGif: false,\n          gifStatus: \"success\",\n          gifMessage: message\n        }));\n      }, 5000);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: !showGif && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"modal d-flex justify-content-center align-items-center ml-5 animate__animated animate__bounce\",\n      role: \"dialog\",\n      id: \"modal\",\n      tabIndex: -1,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"modal-dialog\",\n        role: \"\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"modal-content\",\n          children: [/*#__PURE__*/_jsxDEV(\"section\", {\n            className: \"modal-header\",\n            children: /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \" text-teal-500 text-2xl font-serif\",\n              children: \"Please confirm the inputted details\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 87,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n            className: \"modal-body\",\n            children: formDataPreview && Object.keys(formDataPreview).map(data => /*#__PURE__*/_jsxDEV(\"article\", {\n              children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"font-serif\",\n                children: [pascalCaseSeparator(data), \":\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 93,\n                columnNumber: 45\n              }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n                className: \"font-serif\",\n                htmlFor: \"\",\n                children: parseInt(formDataPreview[data]) ? (+formDataPreview[data]).toLocaleString() : formDataPreview[data]\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 94,\n                columnNumber: 45\n              }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 95,\n                columnNumber: 45\n              }, this)]\n            }, data, true, {\n              fileName: _jsxFileName,\n              lineNumber: 92,\n              columnNumber: 41\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n            className: \"modal-footer\",\n            children: actionBtns.map(btns => /*#__PURE__*/_jsxDEV(\"button\", {\n              \"data-target\": \"#modal\",\n              \"data-toggle\": \"modal\",\n              onClick: () => toggleModal(btns),\n              \"data-dismiss\": `${btns.toLowerCase() === 'cancel' ? 'modal' : undefined}`,\n              className: `font-serif btn ${btns.toLowerCase() === 'accept' ? 'bg-blue-900' : 'btn-secondary'} text-white`,\n              children: btns\n            }, btns, false, {\n              fileName: _jsxFileName,\n              lineNumber: 103,\n              columnNumber: 41\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 100,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 17\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Confirm, \"b16WGbJGEJ+gUyp5tQnMwmxoWLA=\", false, function () {\n  return [useDispatch, useSelector];\n});\n\n_c = Confirm;\nexport default Confirm;\n\nvar _c;\n\n$RefreshReg$(_c, \"Confirm\");","map":{"version":3,"sources":["/home/chukwunazaekpere/Documents/Fullstack/javascript/NodeJS/cobble/frontend/src/components/Confirm.tsx"],"names":["axios","React","useEffect","useState","useDispatch","useSelector","showProcessingGifAction","toggleConfirmAction","toggleModalAction","pascalCaseSeparator","Confirm","props","console","log","dispatch","gifData","store","showGif","formDataPreview","setFormDataPreview","toggleModal","action","toLowerCase","sendRequest","gifStatus","gifMessage","formData","actionBtns","response","post","process","env","REACT_APP_LOCAL_SERVER","headers","message","data","setTimeout","error","Object","keys","map","parseInt","toLocaleString","btns","undefined"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,uBAAT,EAAkCC,mBAAlC,EAAuDC,iBAAvD,QAAgF,6BAAhF;AACA,OAAO,2BAAP;AACA,SAASC,mBAAT,QAAoC,eAApC;;;AASA,MAAMC,OAAO,GAAIC,KAAD,IAAkB;AAAA;;AAC9BC,EAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ;AACA,QAAMC,QAAQ,GAAGV,WAAW,EAA5B;AACA,QAAMW,OAAO,GAAGV,WAAW,CAAEW,KAAD,IAAgBA,KAAK,CAACD,OAAvB,CAA3B;AACA,QAAM;AAAEE,IAAAA;AAAF,MAAcF,OAApB;AACA,QAAM,CAACG,eAAD,EAAkBC,kBAAlB,IAAwChB,QAAQ,CAAC;AACnD,0BAAsB,EAD6B;AAEnD,kBAAc,CAFqC;AAGnD,qBAAiB,CAHkC;AAInD,mBAAe;AAJoC,GAAD,CAAtD;;AAOA,QAAMiB,WAAW,GAAIC,MAAD,IAAoB;AACpC,QAAGA,MAAM,CAACC,WAAP,OAAyB,MAA5B,EAAmC;AAC/BR,MAAAA,QAAQ,CAACP,mBAAmB,CAAC,KAAD,CAApB,CAAR;AACA,aAAOO,QAAQ,CAACN,iBAAiB,CAAC,IAAD,CAAlB,CAAf;AACH;;AACDe,IAAAA,WAAW;AACXT,IAAAA,QAAQ,CAACR,uBAAuB,CAAC;AAC7BW,MAAAA,OAAO,EAAE,IADoB;AAE7BO,MAAAA,SAAS,EAAE,SAFkB;AAG7BC,MAAAA,UAAU,EAAE;AAHiB,KAAD,CAAxB,CAAR;AAKH,GAXD;;AAaAvB,EAAAA,SAAS,CAAC,MAAM;AACZiB,IAAAA,kBAAkB,CAAC;AACf,4BAAsBR,KAAK,CAACe,QAAN,CAAe,qBAAf,CADP;AAEf,uBAAiBf,KAAK,CAACe,QAAN,CAAe,gBAAf,CAFF;AAGf,qBAAef,KAAK,CAACe,QAAN,CAAe,cAAf,CAHA;AAIf,oBAAcf,KAAK,CAACe,QAAN,CAAe,aAAf;AAJC,KAAD,CAAlB;AAMH,GAPQ,EAON,CAACf,KAAK,CAACe,QAAP,CAPM,CAAT;AAQA,QAAMC,UAAU,GAAG,CAAC,QAAD,EAAW,MAAX,CAAnB;;AAEA,QAAMJ,WAAW,GAAG,YAAW;AAC3B,QAAI;AACA,YAAMK,QAAQ,GAAG,MAAM5B,KAAK,CAAC6B,IAAN,CAAY,GAAEC,OAAO,CAACC,GAAR,CAAYC,sBAAuB,oBAAjD,EAAsE,EAAC,GAAGd;AAAJ,OAAtE,EAA4F;AAC/Ge,QAAAA,OAAO,EAAE;AACL,0BAAgB;AADX;AADsG,OAA5F,CAAvB;AAKA,YAAMC,OAAO,GAAGN,QAAQ,CAACO,IAAT,CAAcD,OAA9B;AACAE,MAAAA,UAAU,CAAC,MAAM;AACbtB,QAAAA,QAAQ,CAACP,mBAAmB,CAAC,KAAD,CAApB,CAAR;AACAO,QAAAA,QAAQ,CAACN,iBAAiB,CAAC,KAAD,CAAlB,CAAR;AACAM,QAAAA,QAAQ,CAACR,uBAAuB,CAAC;AAC7BW,UAAAA,OAAO,EAAE,KADoB;AAE7BO,UAAAA,SAAS,EAAE,SAFkB;AAG7BC,UAAAA,UAAU,EAAES;AAHiB,SAAD,CAAxB,CAAR;AAKH,OARS,EAQP,IARO,CAAV;AASH,KAhBD,CAgBE,OAAOG,KAAP,EAAmB;AACjBzB,MAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA4BwB,KAA5B;AACA,YAAMH,OAAO,GAAGG,KAAK,CAACT,QAAN,CAAeO,IAAf,CAAoBD,OAApC;AACAE,MAAAA,UAAU,CAAC,MAAM;AACbtB,QAAAA,QAAQ,CAACR,uBAAuB,CAAC;AAC7BW,UAAAA,OAAO,EAAE,KADoB;AAE7BO,UAAAA,SAAS,EAAE,SAFkB;AAG7BC,UAAAA,UAAU,EAAES;AAHiB,SAAD,CAAxB,CAAR;AAKH,OANS,EAMP,IANO,CAAV;AAOH;AACJ,GA5BD;;AA6BA,sBACI,QAAC,KAAD,CAAO,QAAP;AAAA,cAEQ,CAACjB,OAAD,iBACA;AAAK,MAAA,SAAS,EAAC,+FAAf;AAAgH,MAAA,IAAI,EAAC,QAArH;AAA8H,MAAA,EAAE,EAAC,OAAjI;AAAyI,MAAA,QAAQ,EAAE,CAAC,CAApJ;AAAA,6BACI;AAAK,QAAA,SAAS,EAAC,cAAf;AAA8B,QAAA,IAAI,EAAC,EAAnC;AAAA,+BACI;AAAK,UAAA,SAAS,EAAC,eAAf;AAAA,kCACI;AAAS,YAAA,SAAS,EAAC,cAAnB;AAAA,mCACI;AAAG,cAAA,SAAS,EAAC,oCAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,kBADJ,eAII;AAAS,YAAA,SAAS,EAAC,YAAnB;AAAA,sBAEQC,eAAe,IAAIoB,MAAM,CAACC,IAAP,CAAYrB,eAAZ,EAA6BsB,GAA7B,CAAiCL,IAAI,iBACpD;AAAA,sCACI;AAAG,gBAAA,SAAS,EAAC,YAAb;AAAA,2BAA2B1B,mBAAmB,CAAC0B,IAAD,CAA9C;AAAA;AAAA;AAAA;AAAA;AAAA,sBADJ,eAEI;AAAO,gBAAA,SAAS,EAAC,YAAjB;AAA8B,gBAAA,OAAO,EAAC,EAAtC;AAAA,0BAA0CM,QAAQ,CAAEvB,eAAD,CAAyBiB,IAAzB,CAAD,CAAR,GAAkD,CAAC,CAAEjB,eAAD,CAAyBiB,IAAzB,CAAF,EAAkCO,cAAlC,EAAlD,GAAwGxB,eAAD,CAAyBiB,IAAzB;AAAjJ;AAAA;AAAA;AAAA;AAAA,sBAFJ,eAGI;AAAA;AAAA;AAAA;AAAA,sBAHJ;AAAA,eAAcA,IAAd;AAAA;AAAA;AAAA;AAAA,oBADe;AAF3B;AAAA;AAAA;AAAA;AAAA,kBAJJ,eAeI;AAAS,YAAA,SAAS,EAAC,cAAnB;AAAA,sBAEQR,UAAU,CAACa,GAAX,CAAeG,IAAI,iBACf;AAEI,6BAAY,QAFhB;AAGI,6BAAY,OAHhB;AAII,cAAA,OAAO,EAAE,MAAMvB,WAAW,CAACuB,IAAD,CAJ9B;AAKI,8BAAe,GAAEA,IAAI,CAACrB,WAAL,OAAuB,QAAvB,GAAkC,OAAlC,GAA4CsB,SAAW,EAL5E;AAMI,cAAA,SAAS,EAAG,kBAAiBD,IAAI,CAACrB,WAAL,OAAuB,QAAvB,GAAkC,aAAlC,GAAkD,eAAgB,aANnG;AAAA,wBAOKqB;AAPL,eACSA,IADT;AAAA;AAAA;AAAA;AAAA,oBADJ;AAFR;AAAA;AAAA;AAAA;AAAA,kBAfJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AAHR;AAAA;AAAA;AAAA;AAAA,UADJ;AA0CH,CA1GD;;GAAMjC,O;UAEeN,W,EACDC,W;;;KAHdK,O;AA4GN,eAAeA,OAAf","sourcesContent":["import axios from 'axios';\nimport React, { useEffect, useState } from 'react'\nimport { useDispatch, useSelector } from 'react-redux';\nimport { showProcessingGifAction, toggleConfirmAction, toggleModalAction } from '../redux/actions/appActions';\nimport \"../styles/ModalStyles.css\"\nimport { pascalCaseSeparator } from '../validators';\nimport { FormDataInterface } from './Modal';\nimport ProcessingGif from './ProcessingGif';\n\n\ninterface Props {\n    formData: any\n}\n\nconst Confirm = (props: Props) => {\n    console.log(\"\\n\\t Confirm...\")\n    const dispatch = useDispatch();\n    const gifData = useSelector((store: any) => store.gifData);\n    const { showGif } = gifData;\n    const [formDataPreview, setFormDataPreview] = useState({\n        \"accomodationStatus\": '', \n        \"rentAmount\": 0, \n        \"monthlyIncome\": 0, \n        \"paymentPlan\": \"\"\n    })\n\n    const toggleModal = (action: string) => {\n        if(action.toLowerCase() === 'edit'){\n            dispatch(toggleConfirmAction(false))\n            return dispatch(toggleModalAction(true));\n        }\n        sendRequest();\n        dispatch(showProcessingGifAction({\n            showGif: true,\n            gifStatus: \"loading\",\n            gifMessage: \"Please wait. Cobble is processing your request...\"\n        }));\n    }\n  \n    useEffect(() => {\n        setFormDataPreview({\n            \"accomodationStatus\": props.formData[\"Accomodation Status\"],\n            \"monthlyIncome\": props.formData[\"Monthly Income\"],\n            \"paymentPlan\": props.formData[\"Payment Plan\"],\n            \"rentAmount\": props.formData[\"Rent Amount\"]\n        })\n    }, [props.formData])\n    const actionBtns = [\"Accept\", \"Edit\"];\n\n    const sendRequest = async() => {\n        try {\n            const response = await axios.post(`${process.env.REACT_APP_LOCAL_SERVER}/rent/rent-request`, {...formDataPreview}, {\n                headers: {\n                    \"Content-Type\": \"application/json\"\n                }\n            });\n            const message = response.data.message;\n            setTimeout(() => {\n                dispatch(toggleConfirmAction(false));\n                dispatch(toggleModalAction(false));\n                dispatch(showProcessingGifAction({\n                    showGif: false,\n                    gifStatus: \"success\",\n                    gifMessage: message\n                }));\n            }, 5000)\n        } catch (error: any) {\n            console.log(\"\\n\\t Error: \", error)\n            const message = error.response.data.message;\n            setTimeout(() => {\n                dispatch(showProcessingGifAction({\n                    showGif: false,\n                    gifStatus: \"success\",\n                    gifMessage: message\n                }));\n            }, 5000)\n        }\n    }\n    return (\n        <React.Fragment>\n            {\n                !showGif &&\n                <div className=\"modal d-flex justify-content-center align-items-center ml-5 animate__animated animate__bounce\"  role=\"dialog\" id=\"modal\" tabIndex={-1}>\n                    <div className=\"modal-dialog\" role=\"\">\n                        <div className=\"modal-content\">\n                            <section className=\"modal-header\">\n                                <p className=\" text-teal-500 text-2xl font-serif\">Please confirm the inputted details</p>\n                            </section>\n                            <section className=\"modal-body\">\n                                {\n                                    formDataPreview && Object.keys(formDataPreview).map(data => (\n                                        <article key={data}>\n                                            <p className=\"font-serif\">{pascalCaseSeparator(data)}:</p>\n                                            <label className=\"font-serif\" htmlFor=\"\">{parseInt((formDataPreview as any)[data] as any) ? (+(formDataPreview as any)[data]).toLocaleString() : (formDataPreview as any)[data]}</label>\n                                            <hr />\n                                        </article>\n                                    ))\n                                }\n                            </section>\n                            <section className=\"modal-footer\">\n                                {\n                                    actionBtns.map(btns => (\n                                        <button \n                                            key={btns} \n                                            data-target=\"#modal\"\n                                            data-toggle=\"modal\"\n                                            onClick={() => toggleModal(btns)}\n                                            data-dismiss={`${btns.toLowerCase() === 'cancel' ? 'modal' : undefined }`}\n                                            className={`font-serif btn ${btns.toLowerCase() === 'accept' ? 'bg-blue-900' : 'btn-secondary'} text-white`}>\n                                            {btns}\n                                        </button>\n                                    ))\n                                }\n                            </section>\n                        </div>\n                    </div>\n                </div>\n            }\n        </React.Fragment>\n    )\n}\n\nexport default Confirm;\n\n\n"]},"metadata":{},"sourceType":"module"}