{"ast":null,"code":"import _createForOfIteratorHelper from\"/home/chukwunazaekpere/Documents/Fullstack/javascript/NodeJS/cobble/frontend/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";export var inputs=function inputs(keys,values){var count=0;var _iterator=_createForOfIteratorHelper(values),_step;try{for(_iterator.s();!(_step=_iterator.n()).done;){var entery=_step.value;if(!entery){return\"Please enter an input for \".concat(keys[count]);}count++;}}catch(err){_iterator.e(err);}finally{_iterator.f();}};export var titleCase=function titleCase(word){var desiredString=\"\";if(typeof word===\"string\"){var trimmedWord=word.trim();var ww=trimmedWord[0].toUpperCase();var charIndex=0;var _iterator2=_createForOfIteratorHelper(trimmedWord.substring(1)),_step2;try{for(_iterator2.s();!(_step2=_iterator2.n()).done;){var char=_step2.value;if(char===\" \"){ww.concat(char,trimmedWord[charIndex+1].toUpperCase());charIndex+=2;}else{// console.log(\"\\n\\t desired-string ww: \", char, trimmedWord[charIndex], ww)\nww+=char;charIndex++;}}}catch(err){_iterator2.e(err);}finally{_iterator2.f();};desiredString+=ww;};return desiredString;};export var pascalCaseSeparator=function pascalCaseSeparator(word){var titleCasedWord=titleCase(word);// console.log(\"\\n\\t Word: \", word, titleCasedWord)\nvar requiredWord=\"\";var count=0;var _iterator3=_createForOfIteratorHelper(titleCasedWord),_step3;try{for(_iterator3.s();!(_step3=_iterator3.n()).done;){var char=_step3.value;if(count!==0){// console.log(\"\\n\\t char: \", char)\nif(char===char.toUpperCase()){requiredWord+=\" \"+char;}else{requiredWord+=char;}}else{requiredWord+=char.toUpperCase();}count++;}// console.log(\"\\n\\t requiredWord: \", requiredWord)\n}catch(err){_iterator3.e(err);}finally{_iterator3.f();}return requiredWord;};","map":{"version":3,"sources":["/home/chukwunazaekpere/Documents/Fullstack/javascript/NodeJS/cobble/frontend/src/validators/index.ts"],"names":["inputs","keys","values","count","entery","titleCase","word","desiredString","trimmedWord","trim","ww","toUpperCase","charIndex","substring","char","concat","pascalCaseSeparator","titleCasedWord","requiredWord"],"mappings":"0LAEA,MAAO,IAAMA,CAAAA,MAAM,CAAG,QAATA,CAAAA,MAAS,CAACC,IAAD,CAAiBC,MAAjB,CAAiD,CACnE,GAAIC,CAAAA,KAAK,CAAG,CAAZ,CADmE,yCAEjDD,MAFiD,YAEnE,+CAAyB,IAAjBE,CAAAA,MAAiB,aACrB,GAAG,CAACA,MAAJ,CAAW,CACP,0CAAoCH,IAAI,CAACE,KAAD,CAAxC,EACH,CACDA,KAAK,GACR,CAPkE,qDAQtE,CARM,CAYP,MAAO,IAAME,CAAAA,SAAS,CAAG,QAAZA,CAAAA,SAAY,CAACC,IAAD,CAA6B,CAClD,GAAIC,CAAAA,aAAa,CAAG,EAApB,CACA,GAAG,MAAOD,CAAAA,IAAP,GAAiB,QAApB,CAA6B,CACzB,GAAME,CAAAA,WAAW,CAAGF,IAAI,CAACG,IAAL,EAApB,CAEA,GAAIC,CAAAA,EAAE,CAAGF,WAAW,CAAC,CAAD,CAAX,CAAeG,WAAf,EAAT,CACA,GAAIC,CAAAA,SAAS,CAAG,CAAhB,CAJyB,0CAKTJ,WAAW,CAACK,SAAZ,CAAsB,CAAtB,CALS,aAKzB,kDAAyC,IAAjCC,CAAAA,IAAiC,cACrC,GAAGA,IAAI,GAAK,GAAZ,CAAgB,CACZJ,EAAE,CAACK,MAAH,CAAUD,IAAV,CAAgBN,WAAW,CAACI,SAAS,CAAC,CAAX,CAAX,CAAyBD,WAAzB,EAAhB,EACAC,SAAS,EAAI,CAAb,CACH,CAHD,IAGK,CACD;AACAF,EAAE,EAAII,IAAN,CACAF,SAAS,GACZ,CACJ,CAdwB,uDAcxB,CACDL,aAAa,EAAIG,EAAjB,CACH,EACD,MAAOH,CAAAA,aAAP,CACH,CApBM,CAuBP,MAAO,IAAMS,CAAAA,mBAAmB,CAAG,QAAtBA,CAAAA,mBAAsB,CAACV,IAAD,CAAkB,CACjD,GAAMW,CAAAA,cAAc,CAAGZ,SAAS,CAACC,IAAD,CAAhC,CACA;AACA,GAAIY,CAAAA,YAAY,CAAG,EAAnB,CACA,GAAIf,CAAAA,KAAK,CAAG,CAAZ,CAJiD,0CAKjCc,cALiC,aAKjD,kDAA+B,IAAvBH,CAAAA,IAAuB,cAC3B,GAAGX,KAAK,GAAK,CAAb,CAAe,CACX;AACA,GAAGW,IAAI,GAAKA,IAAI,CAACH,WAAL,EAAZ,CAA+B,CAC3BO,YAAY,EAAI,IAAMJ,IAAtB,CACH,CAFD,IAEK,CACDI,YAAY,EAAIJ,IAAhB,CACH,CACJ,CAPD,IAOK,CACDI,YAAY,EAAIJ,IAAI,CAACH,WAAL,EAAhB,CACH,CACDR,KAAK,GACR,CACD;AAlBiD,uDAmBjD,MAAOe,CAAAA,YAAP,CACH,CApBM","sourcesContent":["\n\nexport const inputs = (keys: string[], values: (string | number)[]) => {\n    let count = 0;\n    for(let entery of values){\n        if(!entery){\n            return `Please enter an input for ${keys[count]}`\n        }\n        count++\n    }\n}\n\n\n\nexport const titleCase = (word: string | string[]) => {\n    let desiredString = \"\";\n    if(typeof(word) === \"string\"){\n        const trimmedWord = word.trim();\n        \n        let ww = trimmedWord[0].toUpperCase()\n        let charIndex = 0;\n        for(let char of trimmedWord.substring(1)){\n            if(char === \" \"){\n                ww.concat(char, trimmedWord[charIndex+1].toUpperCase());\n                charIndex += 2;\n            }else{\n                // console.log(\"\\n\\t desired-string ww: \", char, trimmedWord[charIndex], ww)\n                ww += char;\n                charIndex++;\n            }\n        };\n        desiredString += ww;\n    };\n    return desiredString\n}\n\n\nexport const pascalCaseSeparator = (word: string) => {\n    const titleCasedWord = titleCase(word);\n    // console.log(\"\\n\\t Word: \", word, titleCasedWord)\n    let requiredWord = \"\";\n    let count = 0;\n    for(let char of titleCasedWord){\n        if(count !== 0){\n            // console.log(\"\\n\\t char: \", char)\n            if(char === char.toUpperCase()){\n                requiredWord += \" \" + char;\n            }else{\n                requiredWord += char;\n            }\n        }else{\n            requiredWord += char.toUpperCase()\n        }\n        count ++\n    }\n    // console.log(\"\\n\\t requiredWord: \", requiredWord)\n    return requiredWord;\n}"]},"metadata":{},"sourceType":"module"}