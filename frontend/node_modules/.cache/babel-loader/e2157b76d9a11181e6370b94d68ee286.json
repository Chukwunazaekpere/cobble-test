{"ast":null,"code":"export const inputs = (keys, values) => {\n  let count = 0;\n\n  for (let entery of values) {\n    if (!entery) {\n      return `Please enter an input for ${keys[count]}`;\n    }\n\n    count++;\n  }\n};\nexport const titledTextJoiner = textString => {\n  try {\n    const firstChar = textString[0].toLowerCase();\n    const otherChars = textString.slice(1).replaceAll(\" \", \"\"); // console.log(\"\\n\\t firstChar+otherChars: \", firstChar+otherChars)\n\n    return firstChar + otherChars;\n  } catch (error) {\n    // console.log(\"\\n\\t titledTextJoiner error: \", error.message)\n    return \"\";\n  }\n};\nexport const pascalCaseSeparator = word => {\n  const titleCasedWord = titleCase(word); // console.log(\"\\n\\t Word: \", word, titleCasedWord)\n\n  let requiredWord = \"\";\n  let count = 0;\n\n  for (let char of titleCasedWord) {\n    if (count !== 0) {\n      // console.log(\"\\n\\t char: \", char)\n      if (char === char.toUpperCase()) {\n        requiredWord += \" \" + char;\n      } else {\n        requiredWord += char;\n      }\n    } else {\n      requiredWord += char.toUpperCase();\n    }\n\n    count++;\n  } // console.log(\"\\n\\t requiredWord: \", requiredWord)\n\n\n  return requiredWord;\n};","map":{"version":3,"sources":["/home/chukwunazaekpere/Documents/Fullstack/javascript/NodeJS/cobble/frontend/src/validators/index.ts"],"names":["inputs","keys","values","count","entery","titledTextJoiner","textString","firstChar","toLowerCase","otherChars","slice","replaceAll","error","pascalCaseSeparator","word","titleCasedWord","titleCase","requiredWord","char","toUpperCase"],"mappings":"AAEA,OAAO,MAAMA,MAAM,GAAG,CAACC,IAAD,EAAiBC,MAAjB,KAAiD;AACnE,MAAIC,KAAK,GAAG,CAAZ;;AACA,OAAI,IAAIC,MAAR,IAAkBF,MAAlB,EAAyB;AACrB,QAAG,CAACE,MAAJ,EAAW;AACP,aAAQ,6BAA4BH,IAAI,CAACE,KAAD,CAAQ,EAAhD;AACH;;AACDA,IAAAA,KAAK;AACR;AACJ,CARM;AAWP,OAAO,MAAME,gBAAgB,GAAIC,UAAD,IAAwB;AACpD,MAAI;AACA,UAAMC,SAAS,GAAGD,UAAU,CAAC,CAAD,CAAV,CAAcE,WAAd,EAAlB;AACA,UAAMC,UAAU,GAAGH,UAAU,CAACI,KAAX,CAAiB,CAAjB,EAAoBC,UAApB,CAA+B,GAA/B,EAAoC,EAApC,CAAnB,CAFA,CAGA;;AACA,WAAOJ,SAAS,GAACE,UAAjB;AACH,GALD,CAKE,OAAOG,KAAP,EAAmB;AACjB;AACA,WAAO,EAAP;AACH;AACJ,CAVM;AAaP,OAAO,MAAMC,mBAAmB,GAAIC,IAAD,IAAkB;AACjD,QAAMC,cAAc,GAAGC,SAAS,CAACF,IAAD,CAAhC,CADiD,CAEjD;;AACA,MAAIG,YAAY,GAAG,EAAnB;AACA,MAAId,KAAK,GAAG,CAAZ;;AACA,OAAI,IAAIe,IAAR,IAAgBH,cAAhB,EAA+B;AAC3B,QAAGZ,KAAK,KAAK,CAAb,EAAe;AACX;AACA,UAAGe,IAAI,KAAKA,IAAI,CAACC,WAAL,EAAZ,EAA+B;AAC3BF,QAAAA,YAAY,IAAI,MAAMC,IAAtB;AACH,OAFD,MAEK;AACDD,QAAAA,YAAY,IAAIC,IAAhB;AACH;AACJ,KAPD,MAOK;AACDD,MAAAA,YAAY,IAAIC,IAAI,CAACC,WAAL,EAAhB;AACH;;AACDhB,IAAAA,KAAK;AACR,GAjBgD,CAkBjD;;;AACA,SAAOc,YAAP;AACH,CApBM","sourcesContent":["\n\nexport const inputs = (keys: string[], values: (string | number)[]) => {\n    let count = 0;\n    for(let entery of values){\n        if(!entery){\n            return `Please enter an input for ${keys[count]}`\n        }\n        count++\n    }\n}\n\n\nexport const titledTextJoiner = (textString: string) => {\n    try {\n        const firstChar = textString[0].toLowerCase();\n        const otherChars = textString.slice(1).replaceAll(\" \", \"\");\n        // console.log(\"\\n\\t firstChar+otherChars: \", firstChar+otherChars)\n        return firstChar+otherChars;\n    } catch (error: any) {\n        // console.log(\"\\n\\t titledTextJoiner error: \", error.message)\n        return \"\"\n    }\n}\n\n\nexport const pascalCaseSeparator = (word: string) => {\n    const titleCasedWord = titleCase(word);\n    // console.log(\"\\n\\t Word: \", word, titleCasedWord)\n    let requiredWord = \"\";\n    let count = 0;\n    for(let char of titleCasedWord){\n        if(count !== 0){\n            // console.log(\"\\n\\t char: \", char)\n            if(char === char.toUpperCase()){\n                requiredWord += \" \" + char;\n            }else{\n                requiredWord += char;\n            }\n        }else{\n            requiredWord += char.toUpperCase()\n        }\n        count ++\n    }\n    // console.log(\"\\n\\t requiredWord: \", requiredWord)\n    return requiredWord;\n}"]},"metadata":{},"sourceType":"module"}