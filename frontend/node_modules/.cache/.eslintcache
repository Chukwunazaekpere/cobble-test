[{"/home/chukwunazaekpere/Documents/Fullstack/javascript/NodeJS/cobble/frontend/src/App.tsx":"1","/home/chukwunazaekpere/Documents/Fullstack/javascript/NodeJS/cobble/frontend/src/index.tsx":"2","/home/chukwunazaekpere/Documents/Fullstack/javascript/NodeJS/cobble/frontend/src/reportWebVitals.ts":"3","/home/chukwunazaekpere/Documents/Fullstack/javascript/NodeJS/cobble/frontend/src/routes/ProtectedRoutes.tsx":"4","/home/chukwunazaekpere/Documents/Fullstack/javascript/NodeJS/cobble/frontend/src/screens/HomeScreen.tsx":"5","/home/chukwunazaekpere/Documents/Fullstack/javascript/NodeJS/cobble/frontend/src/redux/actions/appActions.ts":"6","/home/chukwunazaekpere/Documents/Fullstack/javascript/NodeJS/cobble/frontend/src/redux/actions/actionTypes.ts":"7","/home/chukwunazaekpere/Documents/Fullstack/javascript/NodeJS/cobble/frontend/src/redux/store/index.ts":"8","/home/chukwunazaekpere/Documents/Fullstack/javascript/NodeJS/cobble/frontend/src/redux/reducers/index.ts":"9","/home/chukwunazaekpere/Documents/Fullstack/javascript/NodeJS/cobble/frontend/src/redux/reducers/appReducers.ts":"10","/home/chukwunazaekpere/Documents/Fullstack/javascript/NodeJS/cobble/frontend/src/components/Modal.tsx":"11","/home/chukwunazaekpere/Documents/Fullstack/javascript/NodeJS/cobble/frontend/src/components/Confirm.tsx":"12","/home/chukwunazaekpere/Documents/Fullstack/javascript/NodeJS/cobble/frontend/src/validators/index.ts":"13","/home/chukwunazaekpere/Documents/Fullstack/javascript/NodeJS/cobble/frontend/src/components/ProcessingGif.tsx":"14"},{"size":759,"mtime":1645884472081,"results":"15","hashOfConfig":"16"},{"size":787,"mtime":1645788381233,"results":"17","hashOfConfig":"16"},{"size":425,"mtime":1645752427543,"results":"18","hashOfConfig":"16"},{"size":316,"mtime":1645774215720,"results":"19","hashOfConfig":"16"},{"size":2457,"mtime":1645885264853,"results":"20","hashOfConfig":"16"},{"size":1015,"mtime":1645882498606,"results":"21","hashOfConfig":"16"},{"size":480,"mtime":1645882364410,"results":"22","hashOfConfig":"16"},{"size":479,"mtime":1645884546877,"results":"23","hashOfConfig":"16"},{"size":363,"mtime":1645882411250,"results":"24","hashOfConfig":"16"},{"size":1806,"mtime":1645882987785,"results":"25","hashOfConfig":"16"},{"size":7400,"mtime":1645885367185,"results":"26","hashOfConfig":"16"},{"size":5318,"mtime":1645891989972,"results":"27","hashOfConfig":"16"},{"size":1580,"mtime":1645874720082,"results":"28","hashOfConfig":"16"},{"size":1715,"mtime":1645885817333,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","suppressedMessages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33"},"cus1km",{"filePath":"34","messages":"35","suppressedMessages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"38","messages":"39","suppressedMessages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"41","messages":"42","suppressedMessages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"44","messages":"45","suppressedMessages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","suppressedMessages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50"},{"filePath":"51","messages":"52","suppressedMessages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","suppressedMessages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","suppressedMessages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"60","messages":"61","suppressedMessages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"63","messages":"64","suppressedMessages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66"},{"filePath":"67","messages":"68","suppressedMessages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70"},{"filePath":"71","messages":"72","suppressedMessages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"74","messages":"75","suppressedMessages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77"},"/home/chukwunazaekpere/Documents/Fullstack/javascript/NodeJS/cobble/frontend/src/App.tsx",["78","79"],[],"import React, { useEffect } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport ProtectedRoutes from './routes/ProtectedRoutes';\nimport { useDispatch } from 'react-redux';\nimport { showProcessingGifAction, toggleConfirmAction, toggleModalAction } from './redux/actions/appActions';\n\nconst App = () => {\n  const dispatch = useDispatch();\n  useEffect(() => {\n    dispatch(toggleModalAction(false));\n    dispatch(toggleConfirmAction(false));\n    dispatch(showProcessingGifAction({\n      showGif: false,\n      gifStatus: \"loading\",\n      gifMessage: \"\"\n  }));\n  }, [])\n  return (\n    <div className=\"App\">\n      {/* <header className=\"App-header\"> */}\n        <ProtectedRoutes />\n      {/* </header> */}\n    </div>\n  );\n}\n\nexport default App;\n","/home/chukwunazaekpere/Documents/Fullstack/javascript/NodeJS/cobble/frontend/src/index.tsx",[],[],["80","81"],"/home/chukwunazaekpere/Documents/Fullstack/javascript/NodeJS/cobble/frontend/src/reportWebVitals.ts",[],[],"/home/chukwunazaekpere/Documents/Fullstack/javascript/NodeJS/cobble/frontend/src/routes/ProtectedRoutes.tsx",[],[],"/home/chukwunazaekpere/Documents/Fullstack/javascript/NodeJS/cobble/frontend/src/screens/HomeScreen.tsx",[],[],"/home/chukwunazaekpere/Documents/Fullstack/javascript/NodeJS/cobble/frontend/src/redux/actions/appActions.ts",["82","83","84","85"],[],"import { ActionTypes, ConfirmActionInteface, FormDataActionInteface, ModalActionInteface, ShowGifActionInteface } from \"./actionTypes\"\n\n\nexport const toggleModalAction = (modalStatus: boolean) => {\n    console.log(\"\\n\\t toggleModalAction...\")\n    return<ModalActionInteface>({\n        type: ActionTypes.SHOW_MODAL,\n        payload: modalStatus\n    });\n};\n\nexport const toggleConfirmAction = (modalStatus: boolean) => {\n    console.log(\"\\n\\t toggleModalAction...\")\n    return<ConfirmActionInteface>({\n        type: ActionTypes.SHOW_CONFIRM,\n        payload: modalStatus\n    });\n};\n\nexport const formDataAction = (formData: object) => {\n    console.log(\"\\n\\t formDataAction...\")\n    return<FormDataActionInteface>({\n        type: ActionTypes.FORM_DATA,\n        payload: formData\n    });\n};\n\nexport const showProcessingGifAction = (gifData: any) => {\n    console.log(\"\\n\\t showProcessingGifAction...\", gifData)\n    return<ShowGifActionInteface>({\n        type: ActionTypes.SHOW_GIF,\n        payload: gifData\n    });\n};","/home/chukwunazaekpere/Documents/Fullstack/javascript/NodeJS/cobble/frontend/src/redux/actions/actionTypes.ts",[],[],"/home/chukwunazaekpere/Documents/Fullstack/javascript/NodeJS/cobble/frontend/src/redux/store/index.ts",[],[],"/home/chukwunazaekpere/Documents/Fullstack/javascript/NodeJS/cobble/frontend/src/redux/reducers/index.ts",[],[],"/home/chukwunazaekpere/Documents/Fullstack/javascript/NodeJS/cobble/frontend/src/redux/reducers/appReducers.ts",[],[],"/home/chukwunazaekpere/Documents/Fullstack/javascript/NodeJS/cobble/frontend/src/components/Modal.tsx",["86","87"],[],"import React, { useEffect, useState } from 'react'\nimport { useDispatch, useSelector } from 'react-redux';\nimport { formDataAction, toggleConfirmAction, toggleModalAction } from '../redux/actions/appActions';\nimport \"../styles/ModalStyles.css\"\nimport { inputs } from '../validators';\n\n\ninterface Props {\n    formData: any\n}\n\nexport interface FormDataInterface {\n    \"Accomodation Status\": string, \n    \"Rent Amount\": number , \n    \"Monthly Income\": number, \n    \"Payment Plan\": string | number\n    [key: string]: string | number\n}\n\nconst Modal = (props: Props) => {\n    console.log(\"\\n\\t Modal...\")\n    const dispatch = useDispatch();\n\n    const [errorMessage, setErrorMessage] = useState(\"\")\n    const [formData, setFormData] = useState<FormDataInterface>({\n        \"Accomodation Status\": '', \n        \"Rent Amount\": 0, \n        \"Monthly Income\": 0, \n        \"Payment Plan\": \"\"\n    })\n  \n    const accStat = [\"Select accomodation status\", \"Rent renewal\", \"Searching\", \"Ready to pay for a new place\"]\n    const paymentPlan = [\"Select payment plan\", \"1\", \"2\", \"3\", \"6\", \"12\"]\n    const placeholders = [\"What's your accomodation status?\", \"How much are you requesting for your rent?\", \"What's your monthly income?\", \"Choose a payment plan (in months)\"];\n    const actionBtns = [\"Preview\", \"Cancel\"];\n    const fieldTypes = ['select', 'input', 'input', 'select'];\n    const helpText = [\"\", \"\", \"\", \"This is the frequency of re-payment.\"]\n    const handleInputChange = (field: string, value: string | number) => {\n        console.log(\"\\n\\t formData: \", field, value)\n        const newData = formData;\n        newData[field] = value;\n        setFormData({\n            ...newData\n        });\n        setErrorMessage(\"\")\n    };\n    const previewFormData = () => {\n        const report = inputs(Object.keys(formData), Object.values(formData))\n        if(report) return setErrorMessage(report);\n        dispatch(formDataAction(formData))\n        dispatch(toggleModalAction(false));\n        dispatch(toggleConfirmAction(true))\n    };\n    useEffect(() => {\n        props.formData && setFormData({\n            \"Accomodation Status\": props.formData[\"Accomodation Status\"],\n            \"Monthly Income\": props.formData[\"Monthly Income\"] as number,\n            \"Payment Plan\": props.formData[\"Payment Plan\"],\n            \"Rent Amount\": props.formData[\"Rent Amount\"]as number\n        })\n    }, [props.formData])\n    console.log(\"\\n\\t props.formData: \", formData && formData)\n    return (\n        <div className=\"modal d-flex justify-content-center align-items-center ml-5 animate__animated animate__bounce\"  role=\"dialog\" id=\"modal\" tabIndex={-1}>\n            \n            <div className=\"modal-dialog\" role=\"\">\n                <div className=\"modal-content\">\n                    <section className=\"modal-header\">\n                        <span className=\"text-teal-500 text-2xl font-serif\">Fill in the required details below</span> <br />\n                    </section>\n                    <section className=\"modal-body\">\n                        {\n                            errorMessage &&\n                            <p className=\"text-2md text-center font-weight-bold text-red-700 font-serif my-3\">{errorMessage}</p>\n                        }\n                        {\n                            Object.keys(formData).map((name, index) => (\n                                <section key={name}>\n                                    {\n                                        fieldTypes[index] === \"select\" ?\n                                            <article className=\"form-select form-group \">\n                                                <label className=\"font-serif text-sm align-start d-flex\" htmlFor=\"\">{placeholders[index]}:</label>\n                                                <select \n                                                    onChange={e => handleInputChange(name, e.target.value)}\n                                                    className=\"font-serif form-control\" name=\"\" id=\"\">\n                                                    {\n                                                        name.toLowerCase().includes('payment') ?\n                                                        paymentPlan.map(item => (\n                                                            <option  className=\"font-serif\" key={item} value={item.toLowerCase().includes(\"select\") ? \"\" : item}>{item}</option>\n                                                        ))\n                                                        :\n                                                        accStat.map(item => (\n                                                            <option className=\"font-serif\" key={item} value={item.toLowerCase().includes(\"select\") ? \"\" : item}>{item}</option>\n                                                        ))\n                                                    }\n                                                </select>\n                                                <span className=\"font-serif text-orange-700 text-sm font-weight-bold\">{helpText[index]}</span>\n                                            </article>\n                                            :\n                                            <article className=\"form-group\">\n                                                <label className=\"font-serif text-sm align-start d-flex\" htmlFor=\"\">{placeholders[index]}:</label>\n                                                <input \n                                                    onChange={e => handleInputChange(name, e.target.value)}\n                                                    type=\"number\" \n                                                    min={1} \n                                                    placeholder={`Enter ${name}`} \n                                                    className=\"font-serif form-control\" \n                                                    defaultValue={formData && (name.toLowerCase().includes('income') || name.toLowerCase().includes('amount')) ? \"\" : formData[name]}\n                                                />\n                                                <span className=\"font-serif text-orange-700 font-weight-bold\">{helpText[index]}</span>\n                                            </article>\n                                    }\n                                </section>\n                            ))\n                        }\n                    </section>\n                    <section className=\"modal-footer\">\n                        {\n                            actionBtns.map(btns => (\n                                <button \n                                    key={btns} \n                                    data-target=\"#modal\"\n                                    data-toggle=\"modal\"\n                                    onClick={() => previewFormData()}\n                                    data-dismiss={`${btns.toLowerCase() === 'cancel' ? 'modal' : undefined }`}\n                                    className={`font-serif btn ${btns.toLowerCase() === 'cancel' ? 'btn-secondary' : 'btn-info'} text-white`}>\n                                    {btns}\n                                </button>\n                            ))\n                        }\n                    </section>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default Modal;\n\n\n","/home/chukwunazaekpere/Documents/Fullstack/javascript/NodeJS/cobble/frontend/src/components/Confirm.tsx",["88","89","90","91"],[],"import axios from 'axios';\nimport React, { useEffect, useState } from 'react'\nimport { useDispatch, useSelector } from 'react-redux';\nimport { showProcessingGifAction, toggleConfirmAction, toggleModalAction } from '../redux/actions/appActions';\nimport \"../styles/ModalStyles.css\"\nimport { pascalCaseSeparator } from '../validators';\nimport { FormDataInterface } from './Modal';\nimport ProcessingGif from './ProcessingGif';\n\n\ninterface Props {\n    formData: any\n}\n\nconst Confirm = (props: Props) => {\n    console.log(\"\\n\\t Confirm...\")\n    const dispatch = useDispatch();\n    const [formDataPreview, setFormDataPreview] = useState({\n        \"accomodationStatus\": '', \n        \"rentAmount\": 0, \n        \"monthlyIncome\": 0, \n        \"paymentPlan\": \"\"\n    })\n\n    const toggleModal = (action: string) => {\n        if(action.toLowerCase() === 'edit'){\n            dispatch(toggleConfirmAction(false))\n            return dispatch(toggleModalAction(true));\n        }\n        sendRequest();\n        dispatch(showProcessingGifAction({\n            showGif: true,\n            gifStatus: \"loading\",\n            gifMessage: \"Please wait. Cobble is processing your request...\"\n        }));\n    }\n  \n    useEffect(() => {\n        setFormDataPreview({\n            \"accomodationStatus\": props.formData[\"Accomodation Status\"],\n            \"monthlyIncome\": props.formData[\"Monthly Income\"],\n            \"paymentPlan\": props.formData[\"Payment Plan\"],\n            \"rentAmount\": props.formData[\"Rent Amount\"]\n        })\n    }, [props.formData])\n    const actionBtns = [\"Accept\", \"Edit\"];\n\n    const sendRequest = async() => {\n        try {\n            const response = await axios.post(`${process.env.REACT_APP_REMOTE_SERVER}/rent/rent-request`, {...formDataPreview}, {\n                headers: {\n                    \"Content-Type\": \"application/json\"\n                }\n            });\n            const message = response.data.message;\n            dispatch(toggleConfirmAction(false));\n            dispatch(toggleModalAction(false));\n            setTimeout(() => {\n                dispatch(showProcessingGifAction({\n                    showGif: true,\n                    gifStatus: \"success\",\n                    gifMessage: message\n                }));\n            }, 4000);\n            setTimeout(() => {\n                dispatch(showProcessingGifAction({\n                    showGif: false,\n                    gifStatus: \"loading\",\n                    gifMessage: \"\"\n                }));\n                window.location.reload()\n            }, 10000)\n        } catch (error: any) {\n            console.log(\"\\n\\t Error: \", error.response)\n            const message = error.response ? error.response.data.message : \"Network error\";\n            setTimeout(() => {\n                dispatch(showProcessingGifAction({\n                    showGif: true,\n                    gifStatus: \"error\",\n                    gifMessage: message\n                }));\n            }, 4000)\n            setTimeout(() => {\n                dispatch(showProcessingGifAction({\n                    showGif: false,\n                    gifStatus: \"loading\",\n                    gifMessage: \"\"\n                }));\n            }, 10000)\n        }\n    }\n    return (\n        <div className=\"modal d-flex justify-content-center align-items-center ml-5 animate__animated animate__bounce\"  role=\"dialog\" id=\"modal\" tabIndex={-1}>\n            <div className=\"modal-dialog\" role=\"\">\n                <div className=\"modal-content\">\n                    <section className=\"modal-header\">\n                        <p className=\" text-teal-500 text-2xl font-serif\">Please confirm the inputted details</p>\n                    </section>\n                    <section className=\"modal-body\">\n                        {\n                            formDataPreview && Object.keys(formDataPreview).map(data => (\n                                <article key={data}>\n                                    <p className=\"font-serif\">{pascalCaseSeparator(data)}:</p>\n                                    <label className=\"font-serif\" htmlFor=\"\">{parseInt((formDataPreview as any)[data] as any) ? (+(formDataPreview as any)[data]).toLocaleString() : (formDataPreview as any)[data]}</label>\n                                    <hr />\n                                </article>\n                            ))\n                        }\n                    </section>\n                    <section className=\"modal-footer\">\n                        {\n                            actionBtns.map(btns => (\n                                <button \n                                    key={btns} \n                                    data-target=\"#modal\"\n                                    data-toggle=\"modal\"\n                                    onClick={() => toggleModal(btns)}\n                                    data-dismiss={`${btns.toLowerCase() === 'cancel' ? 'modal' : undefined }`}\n                                    className={`font-serif btn ${btns.toLowerCase() === 'accept' ? 'bg-blue-900' : 'btn-secondary'} text-white`}>\n                                    {btns}\n                                </button>\n                            ))\n                        }\n                    </section>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default Confirm;\n\n\n","/home/chukwunazaekpere/Documents/Fullstack/javascript/NodeJS/cobble/frontend/src/validators/index.ts",[],[],"/home/chukwunazaekpere/Documents/Fullstack/javascript/NodeJS/cobble/frontend/src/components/ProcessingGif.tsx",["92","93","94"],[],"import React from 'react'\n\ninterface Props {\n    status?: \"loading\" | \"success\" | \"error\"\n    message?: string\n}\n\nconst ProcessingGif = (props: Props) => {\n    console.log(\"\\n\\t ProcessingGif: \", props.message, props.status)\n    return (\n        <div style={{ height: \"100vh\", width: \"100vw\"}} className=\"d-flex justify-content-center gif\">\n            {\n                props.status === \"loading\" ?\n                <article style={{ width: \"100vw\", flexDirection: \"column\"}} className=\"bg-black d-flex\">\n                    <img className=\"align-self-center\" width={700} height={500} src={require(\"../assets/gifs/loading-gif5.gif\")} />\n                    <p className=\"font-serif text-2xl animate__animated animate__pulse animate__infinite\">{props.message}</p>\n                </article>\n                :\n                props.status === \"success\" ?\n                <article style={{ width: \"100vw\", flexDirection: \"column\"}} className=\"bg-white d-flex \">\n                    <img  className=\"align-self-center mt-4\" width={300} height={100} src={require(\"../assets/gifs/success.gif\")} />\n                    <p className=\"font-serif text-2xl animate__animated animate__pulse animate__infinite\">{props.message}</p>\n                </article>\n                :\n                <article style={{ width: \"100vw\", flexDirection: \"column\"}} className=\"bg-white d-flex\">\n                    <img className=\"align-self-center\" width={200} height={100} src={require(\"../assets/gifs/error2.jpeg\")} />\n                    <p className=\"font-serif text-2xl animate__animated animate__pulse animate__infinite\">{props.message}</p>\n                </article>\n            }\n        </div>\n    )\n}\n\nexport default ProcessingGif;",{"ruleId":"95","severity":1,"message":"96","line":2,"column":8,"nodeType":"97","messageId":"98","endLine":2,"endColumn":12},{"ruleId":"99","severity":1,"message":"100","line":18,"column":6,"nodeType":"101","endLine":18,"endColumn":8,"suggestions":"102"},{"ruleId":"103","replacedBy":"104"},{"ruleId":"105","replacedBy":"106"},{"ruleId":"107","severity":1,"message":"108","line":6,"column":11,"nodeType":"109","messageId":"110","endLine":9,"endColumn":7},{"ruleId":"107","severity":1,"message":"111","line":14,"column":11,"nodeType":"109","messageId":"110","endLine":17,"endColumn":7},{"ruleId":"107","severity":1,"message":"112","line":22,"column":11,"nodeType":"109","messageId":"110","endLine":25,"endColumn":7},{"ruleId":"107","severity":1,"message":"113","line":30,"column":11,"nodeType":"109","messageId":"110","endLine":33,"endColumn":7},{"ruleId":"95","severity":1,"message":"114","line":2,"column":23,"nodeType":"97","messageId":"98","endLine":2,"endColumn":34},{"ruleId":"115","severity":1,"message":"116","line":66,"column":43,"nodeType":"117","endLine":66,"endColumn":50},{"ruleId":"95","severity":1,"message":"114","line":3,"column":23,"nodeType":"97","messageId":"98","endLine":3,"endColumn":34},{"ruleId":"95","severity":1,"message":"118","line":7,"column":10,"nodeType":"97","messageId":"98","endLine":7,"endColumn":27},{"ruleId":"95","severity":1,"message":"119","line":8,"column":8,"nodeType":"97","messageId":"98","endLine":8,"endColumn":21},{"ruleId":"115","severity":1,"message":"116","line":94,"column":43,"nodeType":"117","endLine":94,"endColumn":50},{"ruleId":"120","severity":1,"message":"121","line":15,"column":21,"nodeType":"122","endLine":15,"endColumn":132},{"ruleId":"120","severity":1,"message":"121","line":21,"column":21,"nodeType":"122","endLine":21,"endColumn":133},{"ruleId":"120","severity":1,"message":"121","line":26,"column":21,"nodeType":"122","endLine":26,"endColumn":127},"@typescript-eslint/no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["123"],"no-native-reassign",["124"],"no-negated-in-lhs",["125"],"@typescript-eslint/consistent-type-assertions","Use 'as ModalActionInteface' instead of '<ModalActionInteface>'.","TSTypeAssertion","as","Use 'as ConfirmActionInteface' instead of '<ConfirmActionInteface>'.","Use 'as FormDataActionInteface' instead of '<FormDataActionInteface>'.","Use 'as ShowGifActionInteface' instead of '<ShowGifActionInteface>'.","'useSelector' is defined but never used.","jsx-a11y/aria-role","Elements with ARIA roles must use a valid, non-abstract ARIA role.","JSXAttribute","'FormDataInterface' is defined but never used.","'ProcessingGif' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement",{"desc":"126","fix":"127"},"no-global-assign","no-unsafe-negation","Update the dependencies array to be: [dispatch]",{"range":"128","text":"129"},[581,583],"[dispatch]"]